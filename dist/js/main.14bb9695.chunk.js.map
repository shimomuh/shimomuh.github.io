{"version":3,"sources":["models/calendar.tsx","components/adventCalendar/calendar.tsx","components/adventCalendar/root.tsx","components/index.tsx","serviceWorker.ts","index.tsx"],"names":["Calendar","year","month","Object","classCallCheck","this","dates","make","_this","thisMonthDateCount","thisMonth1stDay","Date","getDay","thisMonthLastDate","getDate","lastMonthDateCount","recursiveCalcDate","index","DateCell","nextMonthDateCount","i","Array","j","date","isActive","concat","react_default","a","createElement","className","calendar_TableHeader","calendar_TableData","TableHeader","map","d","key","TableData","today","calendar","CalendarModel","getFullYear","getMonth","week","AdventCalendar","adventCalendar_calendar_Calendar","Index","root","Boolean","window","location","hostname","match","ReactDOM","render","components","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"dist/js/main.14bb9695.chunk.js","sourcesContent":["// カレンダークラス\n// @example\n// [\n//    [   ,   ,   ,   ,   ,   ,  1],\n//    [  2,  3,  4,  5,  6,  7,  8],\n//    [  9, 10, 11, 12, 13, 14, 15],\n//    [ 16, 17, 18, 19, 20, 21, 22],\n//    [ 23, 24, 25, 26, 27, 28, 29],\n//    [ 30, 31,   ,   ,   ,   ,   ]\n// ]\n//\nclass Calendar {\n  private year: number;\n  private month: number;\n  public dates: any;\n\n  constructor(year: number, month: number) {\n    this.year = year;\n    this.month = month;\n    this.dates = [];\n    this.make();\n  }\n\n  private make(): void {\n    const WEEK = 7;\n\n    let thisMonthDateCount = 1;\n    const thisMonth1stDay = new Date(this.year, this.month - 1, 1).getDay();\n    const thisMonthLastDate = new Date(this.year, this.month, 0).getDate();\n\n    const lastMonthLastDate = new Date(this.year, this.month - 2, 0).getDate();\n    let lastMonthDateCount = lastMonthLastDate;\n    const recursiveCalcDate = (index: number) => {\n      if (index === 0) { return; }\n      index -= 1;\n      this.dates[0][index] = new DateCell(lastMonthDateCount, false);\n      lastMonthDateCount -= 1;\n      if (index > 0) { recursiveCalcDate(index); }\n      return;\n    }\n    let nextMonthDateCount = 1;\n\n    for (let i = 0; thisMonthDateCount <= thisMonthLastDate; i++) {\n      this.dates[i] = new Array(WEEK);\n      for (let j = 0; j < WEEK; j++) {\n        // 第1週\n        if (i === 0) {\n          if (j >= thisMonth1stDay) {\n            this.dates[i][j] = new DateCell(thisMonthDateCount, true);\n            thisMonthDateCount += 1;\n            if (j === thisMonth1stDay) {\n              recursiveCalcDate(j);\n            }\n          }\n        } else {\n          if (thisMonthDateCount > thisMonthLastDate) {\n            this.dates[i][j] = new DateCell(nextMonthDateCount, false);\n            nextMonthDateCount += 1;\n          } else {\n            this.dates[i][j] = new DateCell(thisMonthDateCount, true);\n            thisMonthDateCount += 1;\n          }\n        }\n      }\n    }\n  }\n}\n\nclass DateCell {\n  public date: string;\n  public isActive: boolean;\n\n  constructor(date: number, isActive: boolean) {\n    this.date = `${date}`;\n    this.isActive = isActive;\n  }\n}\n\nexport { Calendar as CalendarModel };\n","import React from 'react';\nimport './calendar.css';\nimport { CalendarModel } from 'models/calendar';\n\nexport const Calendar: React.FC = () => {\n  return (\n    <table className='calendar'>\n      <TableHeader />\n      <TableData />\n    </table>\n  );\n}\n\nconst TableHeader: React.FC = () => {\n  const day = ['日', '月', '火', '水', '木', '金', '土'];\n  return (\n    <thead>\n      <tr>\n        {day.map((d: string, key: number) => <th key={key}>{d}</th>)}\n      </tr>\n    </thead>\n  );\n}\n\nconst TableData: React.FC = () => {\n  const today = new Date();\n  const calendar = new CalendarModel(today.getFullYear(), today.getMonth() + 1);\n  return (\n    <tbody>\n     {calendar.dates.map((week: object[], key: number) => {\n       return <tr key={key}>{week.map((d: any, key: number) => <td key={key} className={d.isActive ? 'is-active' : ''}>{d.date}</td>)}</tr>\n     })}\n    </tbody>\n  );\n}\n","import React from 'react';\nimport { Calendar } from './calendar';\n\nconst AdventCalendar: React.FC = () => {\n  return (\n    <div className='advent-calendar'>\n      <Calendar />\n    </div>\n  );\n}\n\nexport default AdventCalendar;\n","import React from 'react';\nimport AdventCalendar from './adventCalendar/root';\n\nconst Index: React.FC = () => {\n  return (\n    <div className='index'>\n      <h1>Rome was not build in a day.</h1>\n      <AdventCalendar />\n    </div>\n  );\n}\n\nexport default Index;\n","//\n// ありがたく拝借させてもらう\n//\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Index from './components/index';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Index />, document.querySelector('[data-react-site]'));\n\n// my-app から引用\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}